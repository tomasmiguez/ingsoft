1) Para responder esta pregunta ejecutamos el comando

```bash
./gradlew soot -PtargetClass=com.example.Foo -Panalysis=jap.rdtagger
```

obteniendo como resultado el archivo `sootOutput/com.example.Foo.jimple`.

a) En dicho archivo se puede ver que las reaching definitions de `return c;` son
las 2 ramas del condicional previo. Esto es razonable, ya que el estado de c se
ve alterado en ambas, y no hay ninguna otra asignacion anterior al return.

b) Por otro lado, las reaching definitions de `System.out.println(rv);` son la
asignacion a `rv` en la linea anterior, y la instanciacion de `System.out` de la
misma linea, que fue pusheada en el stack y accedida de forma consecutiva.

2) Para las respuestas de este ejercicio primero ejecutamos

```bash
./gradlew soot -PtargetClass=com.example.ReachingDefinitionsExample -Panalysis=jap.rdtagger
```

con lo que generamos el archivo
`sootOutput/com.example.ReachingDefinitionsExample.jimple`.

a) La linea `a = c - a;` es elcanzable por las definiciones `c = 1`, `c = c +
2`, `a = 8` y `a = 5`. Las de `a` son evidentes, ya que dependiendo del largo de
`args` uno o el otro valor seran usados en este punto. En el caso de c, suena
extranio que su valor pueda provenir de `c = 1` ya que con los posibles valores
de `a` y el valor inicial de `c`, siempre deberiamos entrar al while al menos
una vez, pero recordemos que en analisis estatico asumo que cualquier lado de un
branch puede ocurrir sin analisis mas profundo.

b) Para `return a;` es claro que la unica definicion que la alcanza es la
inmediatamente anterior (`a = c - a`), ya que la unica variable involucrada es
`a`, que se redefine inmediatamente antes sin saltos condicionales ni nada de
por medio.

3) En este ejercicio tuvimos que ejecutar

```bash
./gradlew soot -PtargetClass=com.example.LiveVariablesExample -Panalysis=jap.lvtagger
```

lo que genero el archivo `sootOutput/com.example.LiveVariablesExample.jimple`.

Luego simplemente parseamos los comentarios de ese archivo en el formato que
pide la consigna.

| Sentencia   | a  | b  | c  | d  | r  |
|-------------+----+----+----+----+----|
| d = a - b ; | SI | SI | SI | NO | NO |
| r = c;      | NO | NO | NO | NO | SI |
| r = d;      | NO | NO | NO | SI | NO |
| return r;   | NO | NO | NO | NO | NO |

