plugins {
    id 'java'
    id 'info.solidsoft.pitest' version '1.9.0'
    id 'jacoco'
}

group 'org.autotest'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    implementation 'com.github.randoop:randoop:4.3.2'
    implementation 'com.github.kwart.jd:jd-cli:1.2.1'
    implementation 'org.slf4j:slf4j-simple:2.0.7'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

task mutantsToJava() {
    group = "help"
    description = "Converts mutants in Java bytecode exported by PiTest to Java source code files."

    // Process each .class file in the mutants folder inside the pitest report
    doLast {
        fileTree(dir: 'build/reports/pitest/export/', include: '**/*.class').each { file ->
            println "Decompiling mutant in file: " + file.name
            javaexec {
                // We will use the Java Decompiler (jd-cli) to convert the Java bytecode to Java source code.
                // For more info:
                // - https://github.com/intoolswetrust/jd-cli
                // - https://github.com/java-decompiler/jd-core

                mainClass = "com.github.kwart.jd.cli.Main"
                classpath = sourceSets.main.runtimeClasspath

                args('-od', file.parentFile.absolutePath) // output folder
                args(file.absolutePath) // input file
            }
        }
    }
}

pitest {
    // Check "Plugin configuration" in https://gradle-pitest-plugin.solidsoft.info/ for available settings.
    // All available options for the PiTest Gradle plugin can be found here: https://github.com/szpak/gradle-pitest-plugin/blob/master/src/main/groovy/info/solidsoft/gradle/pitest/PitestPluginExtension.groovy

    //adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
    junit5PluginVersion = '1.0.0'

    // Configuration for pitest reports
    timestampedReports = false

    // Set "verbose = true" to get more details of pitest's process when it runs
    verbose = false

    // Set max memory allowed for pitest
    jvmArgs = ['-Xmx1024m']

    // Add more threads for extra performance
    threads = 4

    // Enable writing out Mutants (in Java bytecode) to a folder
    features = ['+EXPORT']
}

afterEvaluate {
    // We wait for the project to be evaluated before setting mutantsToJava task as the final task of pitest.
    // If we just try to add "pitest.finalizedBy mutantsToJava" to the build.gradle file, it will not work because the pitest task will not be created yet.
    // Also, "pitest" in the build.gradle file is not the same as "pitest" in the afterEvaluate block. One is a task and the other is a configuration method.
    project.tasks.each { task ->
        if (task.name == "pitest") {
            task.finalizedBy mutantsToJava
        }
    }
}

task fixTestsImport() {
    group = "help"
    description = "Fixes the import statements in the tests files generated by Randoop so we can run tests using Junit 5."

    doLast {
        fileTree(dir: 'src/test/java', include: '**/*.java').each { file ->
            file.text = file.text.replace('org.junit.Test;', 'org.junit.jupiter.api.Test;')
        }
    }
}

task cleanGeneratedTests() {
    group = "help"
    doLast {
        fileTree(dir: 'src/test/java', include: '**/*.java').each { file ->
            file.delete()
        }
    }
}

task randoop(type: JavaExec, dependsOn: jar) {
    group = "verification"
    description = "Runs Randoop on the project's classes."

    main = "randoop.main.Main"
    classpath = sourceSets.main.runtimeClasspath

    args('gentests')
    args('--testclass', 'org.autotest.StackAr')
    args('--time-limit', '15') // seconds
    args('--testsperfile', '50')
    args('--junit-output-dir', 'src/test/java')
    args('--junit-package-name', 'org.autotest')

    dependsOn cleanGeneratedTests
    finalizedBy fixTestsImport
}